//=============================================================================
// Verilog module generated by IPExpress    01/20/2010    14:16:54          
// Filename: sgdma.v                                               
// Copyright(c) 2007 Lattice Semiconductor Corporation. All rights reserved.   
//=============================================================================

//------------------------------------------------
// sgdma module Definition            
//------------------------------------------------

module sgdma (
    input clk,
    input rstn,
    input rst_core,
    output a_cyc,
    output a_stb,
    output a_lock,
    output a_we,
    output [2:0] a_cti,
    output [7:0] a_sel,
    output [31:0] a_addr,
    output [63:0] a_wdat,
    input [63:0] a_rdat,
    input a_ack,
    input a_err,
    input a_retry,
    input a_eod,
    output b_cyc,
    output b_stb,
    output b_lock,
    output b_we,
    output [2:0] b_cti,
    output [7:0] b_sel,
    output [31:0] b_addr,
    output [63:0] b_wdat,
    input [63:0] b_rdat,
    input b_ack,
    input b_err,
    input b_retry,
    input b_eod,
    output b_active,
    input [31:0] saddr,
    input [31:0] swdat,
    output [31:0] srdat,
    input scyc,
    input sstb,
    input [3:0] ssel,
    input swe,
    output sack,
    output serr,
    input [1:0] dma_req,
    output [1:0] dma_ack,
    output [1:0] eventx,
    output [1:0] errorx,
    output [0:0] actchan,
    output [0:0] subchan,
    output a_active,
    output [15:0] max_burst_size,
    output [9:0] bd_waddr,
    output [9:0] bd_raddr,
    output [31:0] bd_wdat,
    input [31:0] bd_rdat,
    output bd_we,
    output bd_re,
    input bd_rval
    );

sgdmac_core # (
    .NUM_CHAN(2),
    .NUM_SUB(0),
    .DWIDTHA(64),
    .DWIDTHB(64),
    .AWIDTH(32),
    .PBUFF_SIZE(0),
    .NUM_BD(256),
    .FULL_ADDR_SIZE(0),
    .FULL_ADDR(0),
    .BIGENDIAN(1),
    .WEIGHTED(0),
    .BUFFER_STATUS(0),
    .SRC_BUS_SIZE( 8'hff ),
    .DST_BUS_SIZE( 8'hff ),
    .SRC_BUS_SEL( 8'hff ),
    .DST_BUS_SEL( 8'hff ),
    .SRC_BUS_ADDR( 32'hffffffff ),
    .DST_BUS_ADDR( 32'hffffffff ),
    .LOCK_VALUE( 8'hff ),
    .AUTORETRY_VALUE( 8'hff ),
    .RETRYTHRESH( 8'hff )
    )
sgdmac_inst (
    .clk(clk),
    .rstn(rstn),
    .rst_core(rst_core),
    .a_addr(a_addr),
    .a_wdat(a_wdat),
    .a_rdat(a_rdat),
    .a_sel(a_sel),
    .a_we(a_we),
    .a_cyc(a_cyc),
    .a_stb(a_stb),
    .a_lock(a_lock),
    .a_cti(a_cti),
    .a_ack(a_ack),
    .a_err(a_err),
    .a_retry(a_retry),
    .a_eod(a_eod),
    .b_addr(b_addr),
    .b_wdat(b_wdat),
    .b_rdat(b_rdat),
    .b_sel(b_sel),
    .b_we(b_we),
    .b_cyc(b_cyc),
    .b_stb(b_stb),
    .b_lock(b_lock),
    .b_cti(b_cti),
    .b_ack(b_ack),
    .b_err(b_err),
    .b_retry(b_retry),
    .b_eod(b_eod),
    .saddr(saddr),
    .swdat(swdat),
    .srdat(srdat),
    .scyc(scyc),
    .sstb(sstb),
    .ssel(ssel),
    .swe(swe),
    .sack(sack),
    .serr(serr),
    .bd_waddr(bd_waddr),
    .bd_raddr(bd_raddr),
    .bd_wdat(bd_wdat),
    .bd_rdat(bd_rdat),
    .bd_we(bd_we),
    .bd_re(bd_re),
    .bd_rval(bd_rval),
    .pb_waddr(pb_waddr),
    .pb_raddr(pb_raddr),
    .pb_wdat(pb_wdat),
    .pb_rdat(pb_rdat),
    .pb_write(pb_write),
    .pb_read(pb_read),
    .pb_rval(pb_rval),
    .dma_req(dma_req),
    .dma_ack(dma_ack),
    .eventx(eventx),
    .errorx(errorx),
    .actchan(actchan),
    .subchan(subchan),
    .a_active(a_active),
    .b_active(b_active),
    .p_active(p_active),
    .max_burst_size(max_burst_size),
    .auxctrl(auxctrl),
    .auxstat(auxstat)
);
endmodule

